1. self.params

  features: int
  kernel_init: Callable = nn.initializers.lecun_normal()
  bias_init: Callable = nn.initializers.zeros

  @nn.compact
  def __call__(self, inputs):
    kernel = self.param('kernel',
                        self.kernel_init, # Initialization function
                        (inputs.shape[-1], self.features))  # shape info.
    y = lax.dot_general(inputs, kernel,
                        (((inputs.ndim - 1,), (0,)), ((), ())),) # TODO Why not jnp.dot?
    bias = self.param('bias', self.bias_init, (self.features,))
    y = y + bias
    return y
위와 같은 꼴이다. 
첫번째 parameter는 parameter의 이름을 의미하고,
두번째 parameter는 initialization function이며,
세번째 parameter는 initialization function의 input, 즉 init argument이다.
https://flax.readthedocs.io/en/latest/guides/flax_basics.html


2. jnp.tile
jax.numpy.tile(A, reps)
Construct an array by repeating A the number of times given by reps.
A를 reps번 만큼 반복해서 array를 만드는 것

example
>>> import jax.numpy as jnp
>>> jnp.tile(1,3)
WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)
DeviceArray([1, 1, 1], dtype=int32)
>>> jnp.tile(1,(3,4,2))
DeviceArray([[[1, 1],
              [1, 1],
              [1, 1],
              [1, 1]],

             [[1, 1],
              [1, 1],
              [1, 1],
              [1, 1]],

             [[1, 1],
              [1, 1],
              [1, 1],
              [1, 1]]], dtype=int32)

              
https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.tile.html
